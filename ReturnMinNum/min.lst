     1                                  %include "asm_io.inc"
     1                              <1> 	extern  read_int, print_int, print_string
     2                              <1> 	extern	read_char, print_char, print_nl
     3                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     4                              <1> 
     5                              <1> %macro 	dump_regs 1
     6                              <1> 	push	  dword %1
     7                              <1> 	call	  sub_dump_regs
     8                              <1> %endmacro
     9                              <1> 
    10                              <1> 
    11                              <1> ;
    12                              <1> ; usage: dump_mem label, start-address, # paragraphs
    13                              <1> %macro  dump_mem 3
    14                              <1> 	push	 dword %1
    15                              <1> 	push	 dword %2
    16                              <1> 	push	 dword %3
    17                              <1> 	call	 sub_dump_mem
    18                              <1> %endmacro
    19                              <1> 
    20                              <1> %macro	dump_math 1
    21                              <1> 	push	 dword %1
    22                              <1> 	call	 sub_dump_math
    23                              <1> %endmacro
    24                              <1> 
    25                              <1> %macro  dump_stack 3
    26                              <1> 	push	 dword %3
    27                              <1>         push     dword %2
    28                              <1> 	push	 dword %1
    29                              <1>         call     sub_dump_stack
    30                              <1> %endmacro
     2                                  
     3                                  ; File:     min.asm
     4                                  
     5                                  ; Author:   Eric Wu, A00961904
     6                                  
     7                                  ; Date:     03/05/2020
     8                                  
     9                                  ; Description:
    10                                  ; This simple program accept user
    11                                  ; for two integer inputs, compare both
    12                                  ; integer, and print the one that is
    13                                  ; smaller in terms of value in decimal
    14                                  
    15                                  ; Compile & run:
    16                                  ; $ make
    17                                  
    18                                  segment .text
    19                                      global main
    20                                      extern printf                                       ; import the printf fucntion
    21                                  
    22                                  main:
    23 00000000 B8[00000000]                mov eax, welcome
    24 00000005 E8(00000000)                call print_string
    25                                  
    26 0000000A B8[28000000]                mov eax, prompt1                                    ; in this section, we are scanning for first
    27 0000000F E8(00000000)                call print_string                                   ; integer from user, and keep it in variable "tmp"
    28 00000014 E8(00000000)                call read_int                                       ; so we can use it for comparison later
    29 00000019 A3[80000000]                mov [tmp], eax
    30                                  
    31 0000001E B8[49000000]                mov eax, prompt2                                    ; in this section, we are scanning for second
    32 00000023 E8(00000000)                call print_string                                   ; integer from user, and keep it in eax so we
    33 00000028 E8(00000000)                call read_int                                       ; can use it for comparison later
    34                                  
    35 0000002D 3B05[80000000]              cmp eax, [tmp]
    36 00000033 7D03                        jge GREATER_EQUAL                                   ; check if the second integer is greater or equal to
    37                                                                                          ; first integer. If is greater, jump to GREATER_EQUAL
    38                                                                                          ; directive, otherwise just go to LESS directive
    39                                      ;dump_regs 0                                         ; for debugging, checking content of register
    40                                  
    41                                      LESS:                                               ; the second integer is smaller than first integer
    42 00000035 50                              push eax
    43 00000036 EB08                            jmp DONE                                        ; skip and proceed to output the result
    44                                  
    45                                      GREATER_EQUAL:                                      ; the first integer is smaller than second integer
    46 00000038 A1[80000000]                    mov eax, [tmp]
    47 0000003D 50                              push eax
    48 0000003E EB00                            jmp DONE                                        ; skip and proceed to output the result
    49                                  
    50                                      DONE:                                               ; now that we have determine the smaller number
    51 00000040 68[69000000]                    push output                                     ; and push to eax, print the output and exit
    52 00000045 E8(00000000)                    call printf
    53 0000004A 83C408                          add esp, 8                                      ; pop off push data from stack after done with printing
    54                                  
    55 0000004D B801000000                      mov eax, 1                                      ; exit the program
    56 00000052 CD80                            int 80h
    57                                  
    58                                  segment .data
    59 00000000 57656C636F6D652074-         welcome: db "Welcome to Eric Wu's Min Calculator!  ", 10, 0 ; welcome message
    59 00000009 6F2045726963205775-
    59 00000012 2773204D696E204361-
    59 0000001B 6C63756C61746F7221-
    59 00000024 20200A00           
    60 00000028 506C6561736520656E-         prompt1: db "Please enter your first number: ", 0   ; prompt for scanning first integer
    60 00000031 74657220796F757220-
    60 0000003A 6669727374206E756D-
    60 00000043 6265723A2000       
    61 00000049 506C6561736520656E-         prompt2: db "Please enter your next number: ", 0    ; prompt for scanning second integer
    61 00000052 74657220796F757220-
    61 0000005B 6E657874206E756D62-
    61 00000064 65723A2000         
    62 00000069 546865206D696E206E-         output: db "The min number is: %d", 10, 0           ; output string for printing final result
    62 00000072 756D6265722069733A-
    62 0000007B 2025640A00         
    63 00000080 00                          tmp: db 0                                           ; variable for keeping first integer
