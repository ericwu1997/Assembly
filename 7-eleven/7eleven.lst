     1                                  %include "asm_io.inc"
     1                              <1> 	extern  read_int, print_int, print_string
     2                              <1> 	extern	read_char, print_char, print_nl
     3                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     4                              <1> 
     5                              <1> %macro 	dump_regs 1
     6                              <1> 	push	  dword %1
     7                              <1> 	call	  sub_dump_regs
     8                              <1> %endmacro
     9                              <1> 
    10                              <1> 
    11                              <1> ;
    12                              <1> ; usage: dump_mem label, start-address, # paragraphs
    13                              <1> %macro  dump_mem 3
    14                              <1> 	push	 dword %1
    15                              <1> 	push	 dword %2
    16                              <1> 	push	 dword %3
    17                              <1> 	call	 sub_dump_mem
    18                              <1> %endmacro
    19                              <1> 
    20                              <1> %macro	dump_math 1
    21                              <1> 	push	 dword %1
    22                              <1> 	call	 sub_dump_math
    23                              <1> %endmacro
    24                              <1> 
    25                              <1> %macro  dump_stack 3
    26                              <1> 	push	 dword %3
    27                              <1>         push     dword %2
    28                              <1> 	push	 dword %1
    29                              <1>         call     sub_dump_stack
    30                              <1> %endmacro
     2                                  
     3                                  ; File:     7eleven.asm
     4                                  
     5                                  ; Author:   Eric Wu, A00971904
     6                                  
     7                                  ; Date:     2/20/2020
     8                                  
     9                                  ; Description:
    10                                  ; This simple program simulates 
    11                                  ; convenient store shopping 
    12                                  
    13                                  ; Compile & run:
    14                                  ; $ make
    15                                  
    16                                  segment .data
    17 00000000 57656C636F6D652074-             welcome:   db "Welcome to Eric's 7-eleven store!  ", 10, 0
    17 00000009 6F2045726963277320-
    17 00000012 372D656C6576656E20-
    17 0000001B 73746F72652120200A-
    17 00000024 00                 
    18 00000025 506C6561736520656E-             prompt:    db "Please enter your quantity here.", 10, 0
    18 0000002E 74657220796F757220-
    18 00000037 7175616E7469747920-
    18 00000040 686572652E0A00     
    19 00000047 20202020536C757270-             item1      db "    Slurpees ($10 each): ", 0
    19 00000050 656573202824313020-
    19 00000059 65616368293A2000   
    20 00000061 20202020486F74646F-             item2      db "    Hotdogs ($20 each): ", 0
    20 0000006A 677320282432302065-
    20 00000073 616368293A2000     
    21 0000007A 202020204368697073-             item3      db "    Chips ($30 each): ", 0  
    21 00000083 202824333020656163-
    21 0000008C 68293A2000         
    22 00000091 596F757220746F7461-             total:     db  "Your total in dolars is: ", 0
    22 0000009A 6C20696E20646F6C61-
    22 000000A3 72732069733A2000   
    23 000000AB 0A000000                        item1_cost  dd 10
    24 000000AF 14000000                        item2_cost  dd 20
    25 000000B3 1E000000                        item3_cost  dd 30
    26                                  
    27                                  segment .bss
    28 00000000 <res 00000004>          result  resd 1
    29                                  
    30                                  segment .text
    31                                          global  main
    32                                  
    33                                  main:
    34 00000000 B8[00000000]                    mov     eax, welcome		
    35 00000005 E8(00000000)                    call    print_string		 
    36 0000000A B8[25000000]                    mov     eax, prompt		
    37 0000000F E8(00000000)                    call    print_string
    38                                  
    39                                          ;----------------------------------------------------
    40                                          ; get quantities and calculate running total
    41                                          ;----------------------------------------------------
    42                                  
    43 00000014 31DB                            xor     ebx, ebx                        ; addded 
    44 00000016 31C0                            xor     eax, eax                        ; addded 
    45                                          
    46 00000018 B8[47000000]                    mov     eax, item1			
    47 0000001D E8(00000000)                    call    print_string		
    48 00000022 E8(00000000)                    call    read_int			; get number into eax
    49 00000027 F62D[AB000000]                  imul    byte [item1_cost]               ; addded 
    50 0000002D 00C3                            add     bl, al                          ; addded 
    51                                  
    52 0000002F B8[61000000]                    mov     eax, item2			
    53 00000034 E8(00000000)                    call    print_string		
    54 00000039 E8(00000000)                    call    read_int
    55 0000003E F62D[AF000000]                  imul    byte [item2_cost]               ; addded 	
    56 00000044 00C3                            add     bl, al		                ; addded 
    57                                  
    58 00000046 B8[7A000000]                    mov     eax, item3  		
    59 0000004B E8(00000000)                    call    print_string		
    60 00000050 E8(00000000)                    call    read_int
    61 00000055 F62D[B3000000]                  imul    byte [item3_cost]               ; addded 	
    62 0000005B 00C3                            add     bl, al	                        ; addded 
    63                                  
    64                                          ; dump_regs 0                           ; addded  
    65                                  
    66                                          ;------------------------------------
    67                                          ; print the grand total 
    68                                          ;------------------------------------
    69 0000005D B8[91000000]                    mov     eax, total
    70 00000062 E8(00000000)                    call    print_string
    71 00000067 89D8                            mov     eax, ebx                        ; addded 
    72 00000069 E8(00000000)                    call    print_int
    73 0000006E E8(00000000)                    call    print_nl
    74                                  	
    75                                  
